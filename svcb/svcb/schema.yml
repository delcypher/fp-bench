# Copyright (c) 2016, Daniel Liew
# This file is covered by the license in LICENSE-SVCB.txt
title: "SV-COMP benchmark description schema"
description: |
  This schema (written in YAML) describes a structued data format to be checked
  by [json-schema](http://json-schema.org/). This data format (typically
  written in YAML for convenience) describes enough information about a
  benchmark for it to be both compiled and given to a verifier tool.
# FIXME: What's the right way to do versioning of this schema?
__version__: 0
"$schema": "http://json-schema.org/draft-04/schema#"
type: object
# Definitions contains common parts of the schema for reuse
definitions:
  categories: &categories
    type: array
    uniqueItems: true
  defines: &macro_defines
    type: object
    patternProperties:
      "^[A-Z][A-Z0-9_]*":
          anyOf:
            -
              # A definition without any value
              type: "null"
            -
              # A definition with a value
              type: string
              pattern: "[A-Za-z0-9]+"
    additionalProperties: false
  dependency_properties: &dependency_properties
    # Addition dependency information
    type: object
    properties:
      version:
        type: string
  dependencies: &dependencies
    type: object
    additionalProperties: false
    patternProperties:
      "^[a-zA-Z0-9_-]+$": *dependency_properties
  verification_task_properties: &verification_task_properties
    type: object
    properties:
      correct:
        anyOf:
          -
            # true indicates that the benchmark should be correct with
            # respect to the particular verification task. false indicates
            # that it is not
            type: boolean
          -
            # Indicates that the correctness is unknown with respect to
            # the particular verification task.
            type: "null"
      counter_examples:
        # List of some possible counter examples to correctness (i.e. bugs).
        # There is no requirement for this list to be exhaustive.
        type: array
        minItems: 1
        uniqueItems: true
        items:
          type: object
          additionalProperties: false
          properties:
            description:
              type: string
            locations:
              # Source file locations associated with the counter example.
              # A bug might involve multiple source locations which is why
              # it is possible to have an array of them.
              minItems: 1
              uniqueItems: true
              type: array
              items:
                type: object
                additionalProperties: false
                properties:
                  description:
                    type: string
                  file:
                    type: string
                  line:
                    type: integer
                    minimum: 1
                  column:
                    type: integer
                    minimum: 1
                required:
                  - file
                  - line
          required:
            - locations
      description:
        type: string
      exhaustive_counter_examples:
        # If specified and true this indicates that the listed counter examples is an exhaustive list.
        # I.e. there should not be any other property violations other than those listed. If
        # `exhaustive_counter_examples` is false or not specified then the list of counter examples
        # may or may not be exhaustive.
        type: boolean
    additionalProperties: false
    required:
      - correct
  verification_tasks: &verification_tasks
    type: object
    minProperties: 0
    additionalProperties: false
    # The semantics here is that if a property is not specified then the benchmark
    # is implicitly assumed to be correct with respect to that property.
    properties:
      # It is not possible to reach an assertion in the program where the
      # assertion will fail.
      "no_assert_fail": *verification_task_properties
      # It is not possible to reach an error function (i.e. `abort()`)
      "no_reach_error_function": *verification_task_properties
      # It is not possible to reach a state in the program where free is called
      # on an invalid address.
      "no_invalid_free": *verification_task_properties
      # It is not possible to reach a state in the program where a pointer to
      # invalid memory is derefenced.
      "no_invalid_deref": *verification_task_properties
      # It is not possible to reach a state in the program where an integer
      # division by zero occurs.
      "no_integer_division_by_zero": *verification_task_properties
      # It is not possible to reach a state in the program where an integer
      # shift operation (i.e. left shift and, logical and arithmetic right
      # shift)  occurs where the amount to shift by is greater than the
      # bitwidth of the value being shifted.
      "no_overshift": *verification_task_properties
additionalProperties: false
properties:
  architectures:
    # FIXME: Although SV-COMP just says ILP32 an IP64
    # we have benchmarks that are x86_64 specific. Being
    # more specific about the intended architecture is one way to deal with this.
    # Is there a better way to handle this?
    oneOf:
      -
        # List of specific architectures that this benchmark is expected
        # to compile/verify under.
        type: array
        minItems: 1
        uniqueItems: true
        items:
          type: string
          enum:
            - x86_64
            - i686
      -
        # Indicates that the benchmark is expected to verify on any
        # architecture with a compliant implementation of C and the C standard
        # library (version specified by the ``language`` key).
        type: string
        enum:
          - any
  categories: *categories
  description:
    type: string
  # These are compiler macro definitions used for the benchmark. If variants
  # are built they will all use these definitions in addition to any extra
  # definitions specified for each variant.
  defines: *macro_defines
  language:
    type: string
    enum:
      - c89
      - c99
      - c11
      - c++98
      - c++03
      - c++11
      - c++14
      # GNU variants of the C standard
      - gnu89
      - gnu99
      - gnu11
      # GNU variants of the C++ standard
      - gnu++98
      - gnu++03
      - gnu++11
      - gnu++14
  dependencies: *dependencies
  misc:
    # This exists to allow an arbitary dictionary to exist that has no schema.
    # This can be used by verification tools to store extra data for a benchmark
    # they find useful that while still conforming to this schema.
    type: object
  name:
    type: string
    pattern: "^[a-zA-Z0-9_.-]+$"
  schema_version:
    type: integer
    minimum: 0
  sources:
    type: array
    minItems: 1
    uniqueItems: true
    items:
      type: string
      allOf:
        # Note windows slashes are not allowed
        - pattern: "^([a-z0-9A-Z_.-]+\\/)*[a-zA-Z0-9._-]+\\.(c|cpp)$"
        # Disallow relative paths
        - not:
            pattern: "\\.\\.\\/"
  variants:
    # Maps a build variant name to a list of compiler macro definitions.
    #
    # Having multiple build variant names declares multiple variants
    # of the benchmark (the full name is "<name>_<build_variant_name>") that
    # should each be built/verified with their own set of compiler macro
    # definitions (unioned with the defines in the top level ``defines`` if it
    # exists).  This provides a convenient way to reuse code between benchmarks
    # that have very minor variations (e.g. loop bound). Note that all sources
    # defined in ``sources`` are used to build each variant
    type: object
    minProperties: 1
    additionalProperties: false
    patternProperties:
      # The name of a build variant must match this pattern
      "^[a-z0-9_-]+$":
        type: "object"
        additionalProperties: false
        properties:
          # Additional categories of this variant. The categories of this variant
          # are unioned with the global categories.
          categories: *categories
          # The macro definitions provided here are unioned with the global
          # macro definitions. It is an error to have conflicting definitions.
          defines: *macro_defines
          # Additional dependencies of this variant. The dependencies of this
          # variant are unioned with the global `dependencies`. The additional
          # dependencies and global dependencies must be disjoint.
          dependencies: *dependencies
          # Additional description of this variant.
          description:
            type: string
          # This specifies the verification tasks for the benchmark variant.
          # Either `verification_tasks` must be specified for each variant
          # or the global `verification_tasks` must be used.
          #
          # NOTE: There is a way to specify that `verification_tasks`
          # should only be specified in one place (using a top level `allOf` then nest `oneOf`
          # to consider the two different places we'd like to put `verification_tasks`) however
          # it makes the schema **very hard** to read and also makes error messages from
          # the schema validator very hard to read. So instead the constraint should be enforced
          # externally from the schema.
          verification_tasks: *verification_tasks
  verification_tasks: *verification_tasks
required:
  - architectures
  - categories
  - language
  - name
  - sources
  - schema_version
  # `verification_tasks` is required here or for each variant
