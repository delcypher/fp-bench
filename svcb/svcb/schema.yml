# Copyright (c) 2016, Daniel Liew
# This file is covered by the license in LICENSE-SVCB.txt
title: "SV-COMP benchmark description schema"
description: |
  This schema (written in YAML) describes a structued data format to be checked
  by [json-schema](http://json-schema.org/). This data format (typically
  written in YAML for convenience) describes enough information about a
  benchmark for it to be both compiled and given to a verifier tool.
# FIXME: What's the right way to do versioning of this schema?
__version__: 0
"$schema": "http://json-schema.org/draft-04/schema#"
type: object
# Definitions contains common parts of the schema for reuse
definitions:
  defines: &macro_defines
    type: object
    patternProperties:
      "^[A-Z][A-Z0-9_]+":
          anyOf:
            -
              # A definition without any value
              type: "null"
            -
              # A definition with a value
              type: string
              pattern: "[A-Za-z0-9]+"
    additionalProperties: false
  verification_task_properties: &verification_task_properties
    type: object
    properties:
      correct:
        anyOf:
          -
            # true indicates that the benchmark should be correct with
            # respect to the particular verification task. false indicates
            # that it is not
            type: boolean
          -
            # Indicates that the correctness is unknown with respect to
            # the particular verification task.
            type: "null"
    additionalProperties: false
    required:
      - correct
  dependency_properties: &dependency_properties
    # Addition dependency information
    type: object
    properties:
      version:
        type: string
  verification_tasks: &verification_tasks
    type: object
    minProperties: 1
    additionalProperties: false
    properties:
      # It is not possible to reach an assertion in the program where the
      # assertion will fail.
      "no_assert_fail": *verification_task_properties
      # It is not possible to reach a state in the program where free is called
      # on an invalid address.
      "no_invalid_free": *verification_task_properties
      # It is not possible to reach a state in the program where a pointer to
      # invalid memory is derefenced.
      "no_invalid_deref": *verification_task_properties
      # It is not possible to reach a state in the program where an integer
      # division by zero occurs.
      "no_integer_division_by_zero": *verification_task_properties
      # It is not possible to reach a state in the program where an integer
      # shift operation (i.e. left shift and, logical and arithmetic right
      # shift)  occurs where the amount to shift by is greater than the
      # bitwidth of the value being shifted.
      "no_overshift": *verification_task_properties
additionalProperties: false
properties:
  architectures:
    # FIXME: Although SV-COMP just says ILP32 an IP64
    # we have benchmarks that are x86_64 specific. Being
    # more specific about the intended architecture is one way to deal with this.
    # Is there a better way to handle this?
    oneOf:
      -
        # List of specific architectures that this benchmark is expected
        # to compile/verify under.
        type: array
        minItems: 1
        uniqueItems: true
        items:
          type: string
          enum:
            - x86_64
            - i686
      -
        # Indicates that the benchmark is expected to verify on any
        # architecture with a compliant implementation of C and the C standard
        # library (version specified by the ``language`` key).
        type: string
        enum:
          - any
  categories:
    type: array
    uniqueItems: true
  comments:
    # TODO: Is this flexible enough?
    type: string
  # These are compiler macro definitions used for the benchmark. If variants
  # are built they will all use these definitions in addition to any extra
  # definitions specified for each variant.
  defines: *macro_defines
  language:
    type: string
    enum:
      - c89
      - c99
      - c11
      - c++98
      - c++03
      - c++11
      - c++14
      # GNU variants of the C standard
      - gnu89
      - gnu99
      - gnu11
      # GNU variants of the C++ standard
      - gnu++98
      - gnu++03
      - gnu++11
      - gnu++14
  dependencies:
    type: object
    additionalProperties: false
    properties:
    # Possible dependencies
      pthreads: *dependency_properties
      openmp: *dependency_properties
  name:
    type: string
    pattern: "^[a-zA-Z0-9_.-]+$"
  schema_version:
    type: integer
    minimum: 0
  sources:
    type: array
    minItems: 1
    uniqueItems: true
    items:
      type: string
      allOf:
        # Note windows slashes are not allowed
        - pattern: "^([a-z0-9A-Z_.-]+\\/)*[a-zA-Z0-9._-]+\\.(c|cpp)$"
        # Disallow relative paths
        - not:
            pattern: "\\.\\.\\/"
  variants:
    # Maps a build variant name to a list of compiler macro definitions.
    #
    # Having multiple build variant names declares multiple variants
    # of the benchmark (the full name is "<name>_<build_variant_name>") that
    # should each be built/verified with their own set of compiler macro
    # definitions (unioned with the defines in the top level ``defines`` if it
    # exists).  This provides a convenient way to reuse code between benchmarks
    # that have very minor variations (e.g. loop bound). Note that all sources
    # defined in ``sources`` are used to build each variant
    type: object
    minProperties: 1
    additionalProperties: false
    patternProperties:
      # The name of a build variant must match this pattern
      "^[a-z0-9_-]+$": *macro_defines
  verification_tasks: *verification_tasks
required:
  - architectures
  - categories
  - language
  - name
  - sources
  - schema_version
  - verification_tasks
