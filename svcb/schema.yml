title: "SV-COMP benchmark description schema"
description: |
  This schema (written in YAML) describes a structued data format to be checked
  by [json-schema](http://json-schema.org/). This data format (typically
  written in YAML for convenience) describes enough information about a
  benchmark for it to be both compiled and given to a verifier tool.
# FIXME: What's the right way to do versioning of this schema?
__version__: 0
"$schema": "http://json-schema.org/draft-04/schema#"
type: object
# Definitions contains common parts of the schema for reuse
definitions:
  defines: &macro_defines
    type: array
    items:
      # These items are macro definitions
      type: string
      pattern: "^[A-Z][A-Z0-9_]+(=[A-Za-z0-9]+)?$"
properties:
  architectures:
    # FIXME: Although SV-COMP just says ILP32 an IP64
    # we have benchmarks that are x86_64 specific. Being
    # more specific about the intended architecture is one way to deal with this.
    # Is there a better way to handle this?
    oneOf:
      -
        # List of specific architectures that this benchmark is expected
        # to compile/verify under.
        type: array
        minItems: 1
        uniqueItems: true
        items:
          type: string
          enum:
            - x86_64
            - i686
      -
        # Indicates that the benchmark is expected to verify on any
        # architecture with a compliant implementation of C and the C standard
        # library (version specified by the ``language`` key) For a build
        # system this means that it should try to build the benchmark for every
        # architecture it can.
        type: string
        enum:
          - any
  comments:
    # TODO: Is this flexible enough?
    type: string
  # These are compiler macro definitions used for the benchmark. If variants
  # are built they will all use these definitions in addition to any extra
  # definitions specified for each variant.
  defines: *macro_defines
  language:
    type: string
    enum:
      - c89
      - c99
      - c11
      # GNU variants of the C standard
      - gnu89
      - gnu99
      - gnu11
  memory_model:
    type: string
    enum:
      - "precise"
      - "simple"
  name:
    type: string
    pattern: "^[a-zA-Z0-9_.-]+$"
  schema_version:
    type: integer
    minimum: 0
  sources:
    type: array
    minItems: 1
    uniqueItems: true
    items:
      type: string
      allOf:
        # Note windows slashes are not allowed
        - pattern: "^([a-z0-9A-Z_.-]+\\/)*[a-zA-Z0-9._-]+\\.c$"
        # Disallow relative paths
        - not:
            pattern: "\\.\\.\\/"
  variants:
    # Maps a build variant name to a list of compiler macro definitions.
    #
    # Having multiple build variant names declares multiple variants
    # of the benchmark (the full name is "<name>_<build_variant_name>") that
    # should each be built/verified with their own set of compiler macro
    # definitions (unioned with the defines in the top level ``defines`` if it
    # exists).  This provides a convenient way to reuse code between benchmarks
    # that have very minor variations (e.g. loop bound). Note that all sources
    # defined in ``sources`` are used to build each variant
    type: object
    minProperties: 1
    additionalProperties: false
    patternProperties:
      # The name of a build variant must match this pattern
      "^[a-z0-9_-]+$": *macro_defines
  verification_tasks:
    type: array
    minItems: 1
    uniqueItems: true
    items:
      type: string
      enum:
        # CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )
        # The function 'call(__VERIFIER_error())' is not called in any finite
        # execution of the program.
        - "no_reach_error_function"
        # CHECK( init(main()), LTL(G valid-free) )
        # All memory deallocations are valid (counterexample: invalid free).
        # More precisely: There exists no finite execution of the program on
        # which an invalid memory deallocation occurs.
        - "no_invalid_free"
        # CHECK( init(main()), LTL(G valid-deref) )
        # All pointer dereferences are valid (counterexample: invalid
        # dereference). More precisely: There exists no finite execution of the
        # program on which an invalid pointer dereference occurs.
        - "no_invalid_deref"
        # CHECK( init(main()), LTL(G valid-memtrack) )
        # All allocated memory is tracked, i.e., pointed to or deallocated
        # (counterexample: memory leak). More precisely: There exists no finite
        # execution of the program on which the program lost track of some
        # previously allocated memory.
        - "no_leak"
        # CHECK( init(main()), LTL(G ! overflow) )
        #
        # FIXME: This definition seems inadequate
        #
        # It can never happen that the resulting type of an operation is a
        # signed integer type but the resulting value is not in the range of
        # values that are representable by that type.
        - "no_si_overflow"
        # CHECK( init(main()), LTL(F end) )
        # Every path finally reaches the end of the program. The proposition
        # "end" is true at the end of every finite program execution (return of
        # main, exit, abort, etc.). A counterexample for this property is an
        # infinite program execution.
        - "terminates"
required:
  - architectures
  - language
  - memory_model
  - name
  - sources
  - schema_version
  - verification_tasks
